!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.cytoscapeAvsdf=e():t.cytoscapeAvsdf=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=2)}([function(t,e,r){var n;window,n=function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";let n=function(){};n.DimensionD=r(1),n.HashMap=r(2),n.HashSet=r(4),n.IGeometry=r(5),n.IMath=r(6),n.Integer=r(7),n.Point=r(8),n.PointD=r(9),n.RandomSeed=r(10),n.RectangleD=r(11),n.Transform=r(12),n.UniqueIDGeneretor=r(3),n.Quicksort=r(13),n.LinkedList=r(14),n.LGraphObject=r(15),n.LGraph=r(16),n.LEdge=r(19),n.LGraphManager=r(18),n.LNode=r(20),n.Layout=r(21),n.LayoutConstants=r(17),t.exports=n},function(t,e){function r(t,e){this.width=0,this.height=0,null!==t&&null!==e&&(this.height=e,this.width=t)}r.prototype.getWidth=function(){return this.width},r.prototype.setWidth=function(t){this.width=t},r.prototype.getHeight=function(){return this.height},r.prototype.setHeight=function(t){this.height=t},t.exports=r},function(t,e,r){var n=r(3);function i(){this.map={},this.keys=[]}i.prototype.put=function(t,e){var r=n.createID(t);this.contains(r)||(this.map[r]=e,this.keys.push(t))},i.prototype.contains=function(t){n.createID(t);return null!=this.map[t]},i.prototype.get=function(t){var e=n.createID(t);return this.map[e]},i.prototype.keySet=function(){return this.keys},t.exports=i},function(t,e){function r(){}r.lastID=0,r.createID=function(t){return r.isPrimitive(t)?t:null!=t.uniqueID?t.uniqueID:(t.uniqueID=r.getString(),r.lastID++,t.uniqueID)},r.getString=function(t){return null==t&&(t=r.lastID),"Object#"+t},r.isPrimitive=function(t){var e=typeof t;return null==t||"object"!=e&&"function"!=e},t.exports=r},function(t,e,r){var n=r(3);function i(){this.set={}}i.prototype.add=function(t){var e=n.createID(t);this.contains(e)||(this.set[e]=t)},i.prototype.remove=function(t){delete this.set[n.createID(t)]},i.prototype.clear=function(){this.set={}},i.prototype.contains=function(t){return this.set[n.createID(t)]==t},i.prototype.isEmpty=function(){return 0===this.size()},i.prototype.size=function(){return Object.keys(this.set).length},i.prototype.addAllTo=function(t){for(var e=Object.keys(this.set),r=e.length,n=0;n<r;n++)t.push(this.set[e[n]])},i.prototype.size=function(){return Object.keys(this.set).length},i.prototype.addAll=function(t){for(var e=t.length,r=0;r<e;r++){var n=t[r];this.add(n)}},t.exports=i},function(t,e){function r(){}r.calcSeparationAmount=function(t,e,n,i){if(!t.intersects(e))throw"assert failed";var o=new Array(2);r.decideDirectionsForOverlappingNodes(t,e,o),n[0]=Math.min(t.getRight(),e.getRight())-Math.max(t.x,e.x),n[1]=Math.min(t.getBottom(),e.getBottom())-Math.max(t.y,e.y),t.getX()<=e.getX()&&t.getRight()>=e.getRight()?n[0]+=Math.min(e.getX()-t.getX(),t.getRight()-e.getRight()):e.getX()<=t.getX()&&e.getRight()>=t.getRight()&&(n[0]+=Math.min(t.getX()-e.getX(),e.getRight()-t.getRight())),t.getY()<=e.getY()&&t.getBottom()>=e.getBottom()?n[1]+=Math.min(e.getY()-t.getY(),t.getBottom()-e.getBottom()):e.getY()<=t.getY()&&e.getBottom()>=t.getBottom()&&(n[1]+=Math.min(t.getY()-e.getY(),e.getBottom()-t.getBottom()));var s=Math.abs((e.getCenterY()-t.getCenterY())/(e.getCenterX()-t.getCenterX()));e.getCenterY()==t.getCenterY()&&e.getCenterX()==t.getCenterX()&&(s=1);var a=s*n[0],h=n[1]/s;n[0]<h?h=n[0]:a=n[1],n[0]=-1*o[0]*(h/2+i),n[1]=-1*o[1]*(a/2+i)},r.decideDirectionsForOverlappingNodes=function(t,e,r){t.getCenterX()<e.getCenterX()?r[0]=-1:r[0]=1,t.getCenterY()<e.getCenterY()?r[1]=-1:r[1]=1},r.getIntersection2=function(t,e,n){var i=t.getCenterX(),o=t.getCenterY(),s=e.getCenterX(),a=e.getCenterY();if(t.intersects(e))return n[0]=i,n[1]=o,n[2]=s,n[3]=a,!0;var h=t.getX(),u=t.getY(),g=t.getRight(),c=t.getX(),l=t.getBottom(),p=t.getRight(),d=t.getWidthHalf(),f=t.getHeightHalf(),y=e.getX(),v=e.getY(),O=e.getRight(),E=e.getX(),w=e.getBottom(),N=e.getRight(),m=e.getWidthHalf(),x=e.getHeightHalf(),A=!1,L=!1;if(i==s){if(o>a)return n[0]=i,n[1]=u,n[2]=s,n[3]=w,!1;if(o<a)return n[0]=i,n[1]=l,n[2]=s,n[3]=v,!1}else if(o==a){if(i>s)return n[0]=h,n[1]=o,n[2]=O,n[3]=a,!1;if(i<s)return n[0]=g,n[1]=o,n[2]=y,n[3]=a,!1}else{var D,I,_,M,T,b,R=t.height/t.width,S=e.height/e.width,C=(a-o)/(s-i);if(-R==C?i>s?(n[0]=c,n[1]=l,A=!0):(n[0]=g,n[1]=u,A=!0):R==C&&(i>s?(n[0]=h,n[1]=u,A=!0):(n[0]=p,n[1]=l,A=!0)),-S==C?s>i?(n[2]=E,n[3]=w,L=!0):(n[2]=O,n[3]=v,L=!0):S==C&&(s>i?(n[2]=y,n[3]=v,L=!0):(n[2]=N,n[3]=w,L=!0)),A&&L)return!1;if(i>s?o>a?(D=r.getCardinalDirection(R,C,4),I=r.getCardinalDirection(S,C,2)):(D=r.getCardinalDirection(-R,C,3),I=r.getCardinalDirection(-S,C,1)):o>a?(D=r.getCardinalDirection(-R,C,1),I=r.getCardinalDirection(-S,C,3)):(D=r.getCardinalDirection(R,C,2),I=r.getCardinalDirection(S,C,4)),!A)switch(D){case 1:M=u,_=i+-f/C,n[0]=_,n[1]=M;break;case 2:_=p,M=o+d*C,n[0]=_,n[1]=M;break;case 3:M=l,_=i+f/C,n[0]=_,n[1]=M;break;case 4:_=c,M=o+-d*C,n[0]=_,n[1]=M}if(!L)switch(I){case 1:b=v,T=s+-x/C,n[2]=T,n[3]=b;break;case 2:T=N,b=a+m*C,n[2]=T,n[3]=b;break;case 3:b=w,T=s+x/C,n[2]=T,n[3]=b;break;case 4:T=E,b=a+-m*C,n[2]=T,n[3]=b}}return!1},r.getCardinalDirection=function(t,e,r){return t>e?r:1+r%4},r.getIntersection=function(t,e,n,i){if(null==i)return r.getIntersection2(t,e,n);var o,s,a,h,u,g,c,l=t.x,p=t.y,d=e.x,f=e.y,y=n.x,v=n.y,O=i.x,E=i.y;return u=d*p-l*f,g=O*v-y*E,0==(c=(o=f-p)*(h=y-O)-(s=E-v)*(a=l-d))?null:new Point((a*g-h*u)/c,(s*u-o*g)/c)},r.HALF_PI=.5*Math.PI,r.ONE_AND_HALF_PI=1.5*Math.PI,r.TWO_PI=2*Math.PI,r.THREE_PI=3*Math.PI,t.exports=r},function(t,e){function r(){}r.sign=function(t){return t>0?1:t<0?-1:0},r.floor=function(t){return t<0?Math.ceil(t):Math.floor(t)},r.ceil=function(t){return t<0?Math.floor(t):Math.ceil(t)},t.exports=r},function(t,e){function r(){}r.MAX_VALUE=2147483647,r.MIN_VALUE=-2147483648,t.exports=r},function(t,e){function r(t,e,r){this.x=null,this.y=null,null==t&&null==e&&null==r?(this.x=0,this.y=0):"number"==typeof t&&"number"==typeof e&&null==r?(this.x=t,this.y=e):"Point"==t.constructor.name&&null==e&&null==r&&(r=t,this.x=r.x,this.y=r.y)}r.prototype.getX=function(){return this.x},r.prototype.getY=function(){return this.y},r.prototype.getLocation=function(){return new r(this.x,this.y)},r.prototype.setLocation=function(t,e,r){"Point"==t.constructor.name&&null==e&&null==r?(r=t,this.setLocation(r.x,r.y)):"number"==typeof t&&"number"==typeof e&&null==r&&(parseInt(t)==t&&parseInt(e)==e?this.move(t,e):(this.x=Math.floor(t+.5),this.y=Math.floor(e+.5)))},r.prototype.move=function(t,e){this.x=t,this.y=e},r.prototype.translate=function(t,e){this.x+=t,this.y+=e},r.prototype.equals=function(t){if("Point"==t.constructor.name){var e=t;return this.x==e.x&&this.y==e.y}return this==t},r.prototype.toString=function(){return(new r).constructor.name+"[x="+this.x+",y="+this.y+"]"},t.exports=r},function(t,e){function r(t,e){null==t&&null==e?(this.x=0,this.y=0):(this.x=t,this.y=e)}r.prototype.getX=function(){return this.x},r.prototype.getY=function(){return this.y},r.prototype.setX=function(t){this.x=t},r.prototype.setY=function(t){this.y=t},r.prototype.getDifference=function(t){return new DimensionD(this.x-t.x,this.y-t.y)},r.prototype.getCopy=function(){return new r(this.x,this.y)},r.prototype.translate=function(t){return this.x+=t.width,this.y+=t.height,this},t.exports=r},function(t,e){function r(){}r.seed=1,r.x=0,r.nextDouble=function(){return r.x=1e4*Math.sin(r.seed++),r.x-Math.floor(r.x)},t.exports=r},function(t,e){function r(t,e,r,n){this.x=0,this.y=0,this.width=0,this.height=0,null!=t&&null!=e&&null!=r&&null!=n&&(this.x=t,this.y=e,this.width=r,this.height=n)}r.prototype.getX=function(){return this.x},r.prototype.setX=function(t){this.x=t},r.prototype.getY=function(){return this.y},r.prototype.setY=function(t){this.y=t},r.prototype.getWidth=function(){return this.width},r.prototype.setWidth=function(t){this.width=t},r.prototype.getHeight=function(){return this.height},r.prototype.setHeight=function(t){this.height=t},r.prototype.getRight=function(){return this.x+this.width},r.prototype.getBottom=function(){return this.y+this.height},r.prototype.intersects=function(t){return!(this.getRight()<t.x)&&(!(this.getBottom()<t.y)&&(!(t.getRight()<this.x)&&!(t.getBottom()<this.y)))},r.prototype.getCenterX=function(){return this.x+this.width/2},r.prototype.getMinX=function(){return this.getX()},r.prototype.getMaxX=function(){return this.getX()+this.width},r.prototype.getCenterY=function(){return this.y+this.height/2},r.prototype.getMinY=function(){return this.getY()},r.prototype.getMaxY=function(){return this.getY()+this.height},r.prototype.getWidthHalf=function(){return this.width/2},r.prototype.getHeightHalf=function(){return this.height/2},t.exports=r},function(t,e,r){var n=r(9);function i(t,e){this.lworldOrgX=0,this.lworldOrgY=0,this.ldeviceOrgX=0,this.ldeviceOrgY=0,this.lworldExtX=1,this.lworldExtY=1,this.ldeviceExtX=1,this.ldeviceExtY=1}i.prototype.getWorldOrgX=function(){return this.lworldOrgX},i.prototype.setWorldOrgX=function(t){this.lworldOrgX=t},i.prototype.getWorldOrgY=function(){return this.lworldOrgY},i.prototype.setWorldOrgY=function(t){this.lworldOrgY=t},i.prototype.getWorldExtX=function(){return this.lworldExtX},i.prototype.setWorldExtX=function(t){this.lworldExtX=t},i.prototype.getWorldExtY=function(){return this.lworldExtY},i.prototype.setWorldExtY=function(t){this.lworldExtY=t},i.prototype.getDeviceOrgX=function(){return this.ldeviceOrgX},i.prototype.setDeviceOrgX=function(t){this.ldeviceOrgX=t},i.prototype.getDeviceOrgY=function(){return this.ldeviceOrgY},i.prototype.setDeviceOrgY=function(t){this.ldeviceOrgY=t},i.prototype.getDeviceExtX=function(){return this.ldeviceExtX},i.prototype.setDeviceExtX=function(t){this.ldeviceExtX=t},i.prototype.getDeviceExtY=function(){return this.ldeviceExtY},i.prototype.setDeviceExtY=function(t){this.ldeviceExtY=t},i.prototype.transformX=function(t){var e=0,r=this.lworldExtX;return 0!=r&&(e=this.ldeviceOrgX+(t-this.lworldOrgX)*this.ldeviceExtX/r),e},i.prototype.transformY=function(t){var e=0,r=this.lworldExtY;return 0!=r&&(e=this.ldeviceOrgY+(t-this.lworldOrgY)*this.ldeviceExtY/r),e},i.prototype.inverseTransformX=function(t){var e=0,r=this.ldeviceExtX;return 0!=r&&(e=this.lworldOrgX+(t-this.ldeviceOrgX)*this.lworldExtX/r),e},i.prototype.inverseTransformY=function(t){var e=0,r=this.ldeviceExtY;return 0!=r&&(e=this.lworldOrgY+(t-this.ldeviceOrgY)*this.lworldExtY/r),e},i.prototype.inverseTransformPoint=function(t){return new n(this.inverseTransformX(t.x),this.inverseTransformY(t.y))},t.exports=i},function(t,e,r){const n=r(14);function i(){}i.get_object_at=function(t,e){return t instanceof Array?t[e]:t instanceof n?t.get_object_at(e):void 0},i.set_object_at=function(t,e,r){t instanceof Array?t[e]=r:t instanceof n&&t.set_object_at(e,r)},i.quicksort=function(t,e){if(t instanceof n||t instanceof Array){var r,o=e;void 0===o&&(o=i.compare),t instanceof n?r=t.size():t instanceof Array&&(r=t.length-1),r>=0&&i.quicksort_between_indices(t,0,r,o)}},i.quicksort_between_indices=function(t,e,r,o){if(t instanceof n||t instanceof Array){void 0===o&&(o=i.compare);var s=e,a=r,h=Math.floor((s+a)/2),u=i.get_object_at(t,h);do{for(;o(i.get_object_at(t,s),u);)s++;for(;o(u,i.get_object_at(t,a));)a--;if(s<=a){var g=i.get_object_at(t,s);i.set_object_at(t,s,i.get_object_at(t,a)),i.set_object_at(t,a,g),s++,a--}}while(s<=a);e<a&&i.quicksort_between_indices(t,e,a,o),r>s&&i.quicksort_between_indices(t,s,r,o)}},i.compare=function(t,e){return e>t},t.exports=i},function(t,e){const r=t=>({value:t,next:null,prev:null}),n=(t,e,r,n)=>(null!==t?t.next=e:n.head=e,null!==r?r.prev=e:n.tail=e,e.prev=t,e.next=r,n.length++,e),i=(t,e)=>{let{prev:r,next:n}=t;return null!==r?r.next=n:e.head=n,null!==n?n.prev=r:e.tail=r,t.prev=t.next=null,e.length--,t};t.exports=class{constructor(t){this.length=0,this.head=null,this.tail=null,null!=t&&t.forEach(t=>this.push(t))}size(){return this.length}insertBefore(t,e){return n(e.prev,r(t),e,this)}insertAfter(t,e){return n(e,r(t),e.next,this)}insertNodeBefore(t,e){return n(e.prev,t,e,this)}insertNodeAfter(t,e){return n(e,t,e.next,this)}push(t){return n(this.tail,r(t),null,this)}unshift(t){return n(null,r(t),this.head,this)}remove(t){return i(t,this)}pop(){return i(this.tail,this).value}popNode(){return i(this.tail,this)}shift(){return i(this.head,this).value}shiftNode(){return i(this.head,this)}get_object_at(t){if(t<=this.length()){for(var e=1,r=this.head;e<t;)r=r.next,e++;return r.value}}set_object_at(t,e){if(t<=this.length()){for(var r=1,n=this.head;r<t;)n=n.next,r++;n.value=e}}}},function(t,e){t.exports=function(t){this.vGraphObject=t}},function(t,e,r){var n=r(15),i=r(7),o=r(17),s=r(18),a=r(20),h=r(19),u=r(4),g=r(11),c=r(8),l=r(14);function p(t,e,r){n.call(this,r),this.estimatedSize=i.MIN_VALUE,this.margin=o.DEFAULT_GRAPH_MARGIN,this.edges=[],this.nodes=[],this.isConnected=!1,this.parent=t,null!=e&&e instanceof s?this.graphManager=e:null!=e&&e instanceof Layout&&(this.graphManager=e.graphManager)}for(var d in p.prototype=Object.create(n.prototype),n)p[d]=n[d];p.prototype.getNodes=function(){return this.nodes},p.prototype.getEdges=function(){return this.edges},p.prototype.getGraphManager=function(){return this.graphManager},p.prototype.getParent=function(){return this.parent},p.prototype.getLeft=function(){return this.left},p.prototype.getRight=function(){return this.right},p.prototype.getTop=function(){return this.top},p.prototype.getBottom=function(){return this.bottom},p.prototype.isConnected=function(){return this.isConnected},p.prototype.add=function(t,e,r){if(null==e&&null==r){var n=t;if(null==this.graphManager)throw"Graph has no graph mgr!";if(this.getNodes().indexOf(n)>-1)throw"Node already in graph!";return n.owner=this,this.getNodes().push(n),n}var i=t;if(!(this.getNodes().indexOf(e)>-1&&this.getNodes().indexOf(r)>-1))throw"Source or target not in graph!";if(e.owner!=r.owner||e.owner!=this)throw"Both owners must be this graph!";return e.owner!=r.owner?null:(i.source=e,i.target=r,i.isInterGraph=!1,this.getEdges().push(i),e.edges.push(i),r!=e&&r.edges.push(i),i)},p.prototype.remove=function(t){var e=t;if(t instanceof a){if(null==e)throw"Node is null!";if(null==e.owner||e.owner!=this)throw"Owner graph is invalid!";if(null==this.graphManager)throw"Owner graph manager is invalid!";for(var r=e.edges.slice(),n=r.length,i=0;i<n;i++)(o=r[i]).isInterGraph?this.graphManager.remove(o):o.source.owner.remove(o);if(-1==(s=this.nodes.indexOf(e)))throw"Node not in owner node list!";this.nodes.splice(s,1)}else if(t instanceof h){var o;if(null==(o=t))throw"Edge is null!";if(null==o.source||null==o.target)throw"Source and/or target is null!";if(null==o.source.owner||null==o.target.owner||o.source.owner!=this||o.target.owner!=this)throw"Source and/or target owner is invalid!";var s,u=o.source.edges.indexOf(o),g=o.target.edges.indexOf(o);if(!(u>-1&&g>-1))throw"Source and/or target doesn't know this edge!";if(o.source.edges.splice(u,1),o.target!=o.source&&o.target.edges.splice(g,1),-1==(s=o.source.owner.getEdges().indexOf(o)))throw"Not in owner's edge list!";o.source.owner.getEdges().splice(s,1)}},p.prototype.updateLeftTop=function(){for(var t,e,r,n=i.MAX_VALUE,o=i.MAX_VALUE,s=this.getNodes(),a=s.length,h=0;h<a;h++){var u=s[h];n>(t=u.getTop())&&(n=t),o>(e=u.getLeft())&&(o=e)}return n==i.MAX_VALUE?null:(r=null!=s[0].getParent().paddingLeft?s[0].getParent().paddingLeft:this.margin,this.left=o-r,this.top=n-r,new c(this.left,this.top))},p.prototype.updateBounds=function(t){for(var e,r,n,o,s,a=i.MAX_VALUE,h=-i.MAX_VALUE,u=i.MAX_VALUE,c=-i.MAX_VALUE,l=this.nodes,p=l.length,d=0;d<p;d++){var f=l[d];t&&null!=f.child&&f.updateBounds(),a>(e=f.getLeft())&&(a=e),h<(r=f.getRight())&&(h=r),u>(n=f.getTop())&&(u=n),c<(o=f.getBottom())&&(c=o)}var y=new g(a,u,h-a,c-u);a==i.MAX_VALUE&&(this.left=this.parent.getLeft(),this.right=this.parent.getRight(),this.top=this.parent.getTop(),this.bottom=this.parent.getBottom()),s=null!=l[0].getParent().paddingLeft?l[0].getParent().paddingLeft:this.margin,this.left=y.x-s,this.right=y.x+y.width+s,this.top=y.y-s,this.bottom=y.y+y.height+s},p.calculateBounds=function(t){for(var e,r,n,o,s=i.MAX_VALUE,a=-i.MAX_VALUE,h=i.MAX_VALUE,u=-i.MAX_VALUE,c=t.length,l=0;l<c;l++){var p=t[l];s>(e=p.getLeft())&&(s=e),a<(r=p.getRight())&&(a=r),h>(n=p.getTop())&&(h=n),u<(o=p.getBottom())&&(u=o)}return new g(s,h,a-s,u-h)},p.prototype.getInclusionTreeDepth=function(){return this==this.graphManager.getRoot()?1:this.parent.getInclusionTreeDepth()},p.prototype.getEstimatedSize=function(){if(this.estimatedSize==i.MIN_VALUE)throw"assert failed";return this.estimatedSize},p.prototype.calcEstimatedSize=function(){for(var t=0,e=this.nodes,r=e.length,n=0;n<r;n++){t+=e[n].calcEstimatedSize()}return this.estimatedSize=0==t?o.EMPTY_COMPOUND_NODE_SIZE:t/Math.sqrt(this.nodes.length),this.estimatedSize},p.prototype.updateConnected=function(){var t=this;if(0!=this.nodes.length){var e,r,n=new l,i=new u,o=this.nodes[0];for(o.withChildren().forEach(function(t){n.push(t)});0!==n.length;){o=n.shift(),i.add(o);for(var s=(e=o.getEdges()).length,a=0;a<s;a++){if(null!=(r=e[a].getOtherEndInGraph(o,this))&&!i.contains(r))r.withChildren().forEach(function(t){n.push(t)})}}if(this.isConnected=!1,i.size()>=this.nodes.length){var h=0;s=i.size();Object.keys(i.set).forEach(function(e){i.set[e].owner==t&&h++}),h==this.nodes.length&&(this.isConnected=!0)}}else this.isConnected=!0},t.exports=p},function(t,e){function r(){}r.PROOF_QUALITY=0,r.DEFAULT_QUALITY=1,r.DRAFT_QUALITY=2,r.DEFAULT_CREATE_BENDS_AS_NEEDED=!1,r.DEFAULT_INCREMENTAL=!1,r.DEFAULT_ANIMATION_ON_LAYOUT=!0,r.DEFAULT_ANIMATION_DURING_LAYOUT=!1,r.DEFAULT_ANIMATION_PERIOD=50,r.DEFAULT_UNIFORM_LEAF_NODE_SIZES=!1,r.DEFAULT_GRAPH_MARGIN=15,r.NODE_DIMENSIONS_INCLUDE_LABELS=!1,r.SIMPLE_NODE_SIZE=40,r.SIMPLE_NODE_HALF_SIZE=r.SIMPLE_NODE_SIZE/2,r.EMPTY_COMPOUND_NODE_SIZE=40,r.MIN_EDGE_LENGTH=1,r.WORLD_BOUNDARY=1e6,r.INITIAL_WORLD_BOUNDARY=r.WORLD_BOUNDARY/1e3,r.WORLD_CENTER_X=1200,r.WORLD_CENTER_Y=900,t.exports=r},function(t,e,r){var n,i=r(19);function o(t){n=r(16),this.layout=t,this.graphs=[],this.edges=[]}o.prototype.addRoot=function(){var t=this.layout.newGraph(),e=this.layout.newNode(null),r=this.add(t,e);return this.setRootGraph(r),this.rootGraph},o.prototype.add=function(t,e,r,n,i){if(null==r&&null==n&&null==i){if(null==t)throw"Graph is null!";if(null==e)throw"Parent node is null!";if(this.graphs.indexOf(t)>-1)throw"Graph already in this graph mgr!";if(this.graphs.push(t),null!=t.parent)throw"Already has a parent!";if(null!=e.child)throw"Already has a child!";return t.parent=e,e.child=t,t}i=r,r=t;var o=(n=e).getOwner(),s=i.getOwner();if(null==o||o.getGraphManager()!=this)throw"Source not in this graph mgr!";if(null==s||s.getGraphManager()!=this)throw"Target not in this graph mgr!";if(o==s)return r.isInterGraph=!1,o.add(r,n,i);if(r.isInterGraph=!0,r.source=n,r.target=i,this.edges.indexOf(r)>-1)throw"Edge already in inter-graph edge list!";if(this.edges.push(r),null==r.source||null==r.target)throw"Edge source and/or target is null!";if(-1!=r.source.edges.indexOf(r)||-1!=r.target.edges.indexOf(r))throw"Edge already in source and/or target incidency list!";return r.source.edges.push(r),r.target.edges.push(r),r},o.prototype.remove=function(t){if(t instanceof n){var e=t;if(e.getGraphManager()!=this)throw"Graph not in this graph mgr";if(e!=this.rootGraph&&(null==e.parent||e.parent.graphManager!=this))throw"Invalid parent node!";for(var r,o=[],s=(o=o.concat(e.getEdges())).length,a=0;a<s;a++)r=o[a],e.remove(r);var h,u=[];s=(u=u.concat(e.getNodes())).length;for(a=0;a<s;a++)h=u[a],e.remove(h);e==this.rootGraph&&this.setRootGraph(null);var g=this.graphs.indexOf(e);this.graphs.splice(g,1),e.parent=null}else if(t instanceof i){if(null==(r=t))throw"Edge is null!";if(!r.isInterGraph)throw"Not an inter-graph edge!";if(null==r.source||null==r.target)throw"Source and/or target is null!";if(-1==r.source.edges.indexOf(r)||-1==r.target.edges.indexOf(r))throw"Source and/or target doesn't know this edge!";g=r.source.edges.indexOf(r);if(r.source.edges.splice(g,1),g=r.target.edges.indexOf(r),r.target.edges.splice(g,1),null==r.source.owner||null==r.source.owner.getGraphManager())throw"Edge owner graph or owner graph manager is null!";if(-1==r.source.owner.getGraphManager().edges.indexOf(r))throw"Not in owner graph manager's edge list!";g=r.source.owner.getGraphManager().edges.indexOf(r);r.source.owner.getGraphManager().edges.splice(g,1)}},o.prototype.updateBounds=function(){this.rootGraph.updateBounds(!0)},o.prototype.getGraphs=function(){return this.graphs},o.prototype.getAllNodes=function(){if(null==this.allNodes){for(var t=[],e=this.getGraphs(),r=e.length,n=0;n<r;n++)t=t.concat(e[n].getNodes());this.allNodes=t}return this.allNodes},o.prototype.resetAllNodes=function(){this.allNodes=null},o.prototype.resetAllEdges=function(){this.allEdges=null},o.prototype.resetAllNodesToApplyGravitation=function(){this.allNodesToApplyGravitation=null},o.prototype.getAllEdges=function(){if(null==this.allEdges){for(var t=[],e=this.getGraphs(),r=(e.length,0);r<e.length;r++)t=t.concat(e[r].getEdges());t=t.concat(this.edges),this.allEdges=t}return this.allEdges},o.prototype.getAllNodesToApplyGravitation=function(){return this.allNodesToApplyGravitation},o.prototype.setAllNodesToApplyGravitation=function(t){if(null!=this.allNodesToApplyGravitation)throw"assert failed";this.allNodesToApplyGravitation=t},o.prototype.getRoot=function(){return this.rootGraph},o.prototype.setRootGraph=function(t){if(t.getGraphManager()!=this)throw"Root not in this graph mgr!";this.rootGraph=t,null==t.parent&&(t.parent=this.layout.newNode("Root node"))},o.prototype.getLayout=function(){return this.layout},o.prototype.isOneAncestorOfOther=function(t,e){if(null==t||null==e)throw"assert failed";if(t==e)return!0;for(var r,n=t.getOwner();;){if(null==(r=n.getParent()))break;if(r==e)return!0;if(null==(n=r.getOwner()))break}for(n=e.getOwner();;){if(null==(r=n.getParent()))break;if(r==t)return!0;if(null==(n=r.getOwner()))break}return!1},o.prototype.calcLowestCommonAncestors=function(){for(var t,e,r,n,i,o=this.getAllEdges(),s=o.length,a=0;a<s;a++)if(e=(t=o[a]).source,r=t.target,t.lca=null,t.sourceInLca=e,t.targetInLca=r,e!=r){for(n=e.getOwner();null==t.lca;){for(t.targetInLca=r,i=r.getOwner();null==t.lca;){if(i==n){t.lca=i;break}if(i==this.rootGraph)break;if(null!=t.lca)throw"assert failed";t.targetInLca=i.getParent(),i=t.targetInLca.getOwner()}if(n==this.rootGraph)break;null==t.lca&&(t.sourceInLca=n.getParent(),n=t.sourceInLca.getOwner())}if(null==t.lca)throw"assert failed"}else t.lca=e.getOwner()},o.prototype.calcLowestCommonAncestor=function(t,e){if(t==e)return t.getOwner();for(var r=t.getOwner();;){if(null==r)break;for(var n=e.getOwner();;){if(null==n)break;if(n==r)return n;n=n.getParent().getOwner()}r=r.getParent().getOwner()}return r},o.prototype.calcInclusionTreeDepths=function(t,e){var r;null==t&&null==e&&(t=this.rootGraph,e=1);for(var n=t.getNodes(),i=n.length,o=0;o<i;o++)(r=n[o]).inclusionTreeDepth=e,null!=r.child&&this.calcInclusionTreeDepths(r.child,e+1)},o.prototype.includesInvalidEdge=function(){for(var t,e=this.edges.length,r=0;r<e;r++)if(t=this.edges[r],this.isOneAncestorOfOther(t.source,t.target))return!0;return!1},t.exports=o},function(t,e,r){var n=r(15),i=r(5),o=r(6);function s(t,e,r){n.call(this,r),this.isOverlapingSourceAndTarget=!1,this.vGraphObject=r,this.bendpoints=[],this.source=t,this.target=e}for(var a in s.prototype=Object.create(n.prototype),n)s[a]=n[a];s.prototype.getSource=function(){return this.source},s.prototype.getTarget=function(){return this.target},s.prototype.isInterGraph=function(){return this.isInterGraph},s.prototype.getLength=function(){return this.length},s.prototype.isOverlapingSourceAndTarget=function(){return this.isOverlapingSourceAndTarget},s.prototype.getBendpoints=function(){return this.bendpoints},s.prototype.getLca=function(){return this.lca},s.prototype.getSourceInLca=function(){return this.sourceInLca},s.prototype.getTargetInLca=function(){return this.targetInLca},s.prototype.getOtherEnd=function(t){if(this.source===t)return this.target;if(this.target===t)return this.source;throw"Node is not incident with this edge"},s.prototype.getOtherEndInGraph=function(t,e){for(var r=this.getOtherEnd(t),n=e.getGraphManager().getRoot();;){if(r.getOwner()==e)return r;if(r.getOwner()==n)break;r=r.getOwner().getParent()}return null},s.prototype.updateLength=function(){var t=new Array(4);this.isOverlapingSourceAndTarget=i.getIntersection(this.target.getRect(),this.source.getRect(),t),this.isOverlapingSourceAndTarget||(this.lengthX=t[0]-t[2],this.lengthY=t[1]-t[3],Math.abs(this.lengthX)<1&&(this.lengthX=o.sign(this.lengthX)),Math.abs(this.lengthY)<1&&(this.lengthY=o.sign(this.lengthY)),this.length=Math.sqrt(this.lengthX*this.lengthX+this.lengthY*this.lengthY))},s.prototype.updateLengthSimple=function(){this.lengthX=this.target.getCenterX()-this.source.getCenterX(),this.lengthY=this.target.getCenterY()-this.source.getCenterY(),Math.abs(this.lengthX)<1&&(this.lengthX=o.sign(this.lengthX)),Math.abs(this.lengthY)<1&&(this.lengthY=o.sign(this.lengthY)),this.length=Math.sqrt(this.lengthX*this.lengthX+this.lengthY*this.lengthY)},t.exports=s},function(t,e,r){var n=r(15),i=r(7),o=r(11),s=r(17),a=r(10),h=r(9),u=r(4);function g(t,e,r,s){null==r&&null==s&&(s=e),n.call(this,s),null!=t.graphManager&&(t=t.graphManager),this.estimatedSize=i.MIN_VALUE,this.inclusionTreeDepth=i.MAX_VALUE,this.vGraphObject=s,this.edges=[],this.graphManager=t,this.rect=null!=r&&null!=e?new o(e.x,e.y,r.width,r.height):new o}for(var c in g.prototype=Object.create(n.prototype),n)g[c]=n[c];g.prototype.getEdges=function(){return this.edges},g.prototype.getChild=function(){return this.child},g.prototype.getOwner=function(){return this.owner},g.prototype.getWidth=function(){return this.rect.width},g.prototype.setWidth=function(t){this.rect.width=t},g.prototype.getHeight=function(){return this.rect.height},g.prototype.setHeight=function(t){this.rect.height=t},g.prototype.getCenterX=function(){return this.rect.x+this.rect.width/2},g.prototype.getCenterY=function(){return this.rect.y+this.rect.height/2},g.prototype.getCenter=function(){return new h(this.rect.x+this.rect.width/2,this.rect.y+this.rect.height/2)},g.prototype.getLocation=function(){return new h(this.rect.x,this.rect.y)},g.prototype.getRect=function(){return this.rect},g.prototype.getDiagonal=function(){return Math.sqrt(this.rect.width*this.rect.width+this.rect.height*this.rect.height)},g.prototype.setRect=function(t,e){this.rect.x=t.x,this.rect.y=t.y,this.rect.width=e.width,this.rect.height=e.height},g.prototype.setCenter=function(t,e){this.rect.x=t-this.rect.width/2,this.rect.y=e-this.rect.height/2},g.prototype.setLocation=function(t,e){this.rect.x=t,this.rect.y=e},g.prototype.moveBy=function(t,e){this.rect.x+=t,this.rect.y+=e},g.prototype.getEdgeListToNode=function(t){var e=[],r=this;return r.edges.forEach(function(n){if(n.target==t){if(n.source!=r)throw"Incorrect edge source!";e.push(n)}}),e},g.prototype.getEdgesBetween=function(t){var e=[],r=this;return r.edges.forEach(function(n){if(n.source!=r&&n.target!=r)throw"Incorrect edge source and/or target";n.target!=t&&n.source!=t||e.push(n)}),e},g.prototype.getNeighborsList=function(){var t=new u,e=this;return e.edges.forEach(function(r){if(r.source==e)t.add(r.target);else{if(r.target!=e)throw"Incorrect incidency!";t.add(r.source)}}),t},g.prototype.withChildren=function(){var t=new Set;if(t.add(this),null!=this.child)for(var e=this.child.getNodes(),r=0;r<e.length;r++)e[r].withChildren().forEach(function(e){t.add(e)});return t},g.prototype.getNoOfChildren=function(){var t=0;if(null==this.child)t=1;else for(var e=this.child.getNodes(),r=0;r<e.length;r++)t+=e[r].getNoOfChildren();return 0==t&&(t=1),t},g.prototype.getEstimatedSize=function(){if(this.estimatedSize==i.MIN_VALUE)throw"assert failed";return this.estimatedSize},g.prototype.calcEstimatedSize=function(){return null==this.child?this.estimatedSize=(this.rect.width+this.rect.height)/2:(this.estimatedSize=this.child.calcEstimatedSize(),this.rect.width=this.estimatedSize,this.rect.height=this.estimatedSize,this.estimatedSize)},g.prototype.scatter=function(){var t,e,r=-s.INITIAL_WORLD_BOUNDARY,n=s.INITIAL_WORLD_BOUNDARY;t=s.WORLD_CENTER_X+a.nextDouble()*(n-r)+r;var i=-s.INITIAL_WORLD_BOUNDARY,o=s.INITIAL_WORLD_BOUNDARY;e=s.WORLD_CENTER_Y+a.nextDouble()*(o-i)+i,this.rect.x=t,this.rect.y=e},g.prototype.updateBounds=function(){if(null==this.getChild())throw"assert failed";if(0!=this.getChild().getNodes().length){var t=this.getChild();if(t.updateBounds(!0),this.rect.x=t.getLeft(),this.rect.y=t.getTop(),this.setWidth(t.getRight()-t.getLeft()),this.setHeight(t.getBottom()-t.getTop()),s.NODE_DIMENSIONS_INCLUDE_LABELS){var e=t.getRight()-t.getLeft(),r=t.getBottom()-t.getTop();this.labelWidth>e&&(this.rect.x-=(this.labelWidth-e)/2,this.setWidth(this.labelWidth)),this.labelHeight>r&&("center"==this.labelPos?this.rect.y-=(this.labelHeight-r)/2:"top"==this.labelPos&&(this.rect.y-=this.labelHeight-r),this.setHeight(this.labelHeight))}}},g.prototype.getInclusionTreeDepth=function(){if(this.inclusionTreeDepth==i.MAX_VALUE)throw"assert failed";return this.inclusionTreeDepth},g.prototype.transform=function(t){var e=this.rect.x;e>s.WORLD_BOUNDARY?e=s.WORLD_BOUNDARY:e<-s.WORLD_BOUNDARY&&(e=-s.WORLD_BOUNDARY);var r=this.rect.y;r>s.WORLD_BOUNDARY?r=s.WORLD_BOUNDARY:r<-s.WORLD_BOUNDARY&&(r=-s.WORLD_BOUNDARY);var n=new h(e,r),i=t.inverseTransformPoint(n);this.setLocation(i.x,i.y)},g.prototype.getLeft=function(){return this.rect.x},g.prototype.getRight=function(){return this.rect.x+this.rect.width},g.prototype.getTop=function(){return this.rect.y},g.prototype.getBottom=function(){return this.rect.y+this.rect.height},g.prototype.getParent=function(){return null==this.owner?null:this.owner.getParent()},t.exports=g},function(t,e,r){var n=r(17),i=r(2),o=r(18),s=r(20),a=r(19),h=r(16),u=r(9),g=r(12),c=r(22),l=r(4);function p(t){c.call(this),this.layoutQuality=n.DEFAULT_QUALITY,this.createBendsAsNeeded=n.DEFAULT_CREATE_BENDS_AS_NEEDED,this.incremental=n.DEFAULT_INCREMENTAL,this.animationOnLayout=n.DEFAULT_ANIMATION_ON_LAYOUT,this.animationDuringLayout=n.DEFAULT_ANIMATION_DURING_LAYOUT,this.animationPeriod=n.DEFAULT_ANIMATION_PERIOD,this.uniformLeafNodeSizes=n.DEFAULT_UNIFORM_LEAF_NODE_SIZES,this.edgeToDummyNodes=new i,this.graphManager=new o(this),this.isLayoutFinished=!1,this.isSubLayout=!1,this.isRemoteUse=!1,null!=t&&(this.isRemoteUse=t)}p.RANDOM_SEED=1,p.prototype=Object.create(c.prototype),p.prototype.getGraphManager=function(){return this.graphManager},p.prototype.getAllNodes=function(){return this.graphManager.getAllNodes()},p.prototype.getAllEdges=function(){return this.graphManager.getAllEdges()},p.prototype.getAllNodesToApplyGravitation=function(){return this.graphManager.getAllNodesToApplyGravitation()},p.prototype.newGraphManager=function(){var t=new o(this);return this.graphManager=t,t},p.prototype.newGraph=function(t){return new h(null,this.graphManager,t)},p.prototype.newNode=function(t){return new s(this.graphManager,t)},p.prototype.newEdge=function(t){return new a(null,null,t)},p.prototype.checkLayoutSuccess=function(){return null==this.graphManager.getRoot()||0==this.graphManager.getRoot().getNodes().length||this.graphManager.includesInvalidEdge()},p.prototype.runLayout=function(){var t;return this.isLayoutFinished=!1,this.tilingPreLayout&&this.tilingPreLayout(),this.initParameters(),t=!this.checkLayoutSuccess()&&this.layout(),"during"!==n.ANIMATE&&(t&&(this.isSubLayout||this.doPostLayout()),this.tilingPostLayout&&this.tilingPostLayout(),this.isLayoutFinished=!0,t)},p.prototype.doPostLayout=function(){this.incremental||this.transform(),this.update()},p.prototype.update2=function(){if(this.createBendsAsNeeded&&(this.createBendpointsFromDummyNodes(),this.graphManager.resetAllEdges()),!this.isRemoteUse){for(var t=this.graphManager.getAllEdges(),e=0;e<t.length;e++)t[e];var r=this.graphManager.getRoot().getNodes();for(e=0;e<r.length;e++)r[e];this.update(this.graphManager.getRoot())}},p.prototype.update=function(t){if(null==t)this.update2();else if(t instanceof s){var e=t;if(null!=e.getChild())for(var r=e.getChild().getNodes(),n=0;n<r.length;n++)update(r[n]);if(null!=e.vGraphObject)e.vGraphObject.update(e)}else if(t instanceof a){var i=t;if(null!=i.vGraphObject)i.vGraphObject.update(i)}else if(t instanceof h){var o=t;if(null!=o.vGraphObject)o.vGraphObject.update(o)}},p.prototype.initParameters=function(){this.isSubLayout||(this.layoutQuality=n.DEFAULT_QUALITY,this.animationDuringLayout=n.DEFAULT_ANIMATION_DURING_LAYOUT,this.animationPeriod=n.DEFAULT_ANIMATION_PERIOD,this.animationOnLayout=n.DEFAULT_ANIMATION_ON_LAYOUT,this.incremental=n.DEFAULT_INCREMENTAL,this.createBendsAsNeeded=n.DEFAULT_CREATE_BENDS_AS_NEEDED,this.uniformLeafNodeSizes=n.DEFAULT_UNIFORM_LEAF_NODE_SIZES),this.animationDuringLayout&&(this.animationOnLayout=!1)},p.prototype.transform=function(t){if(null==t)this.transform(new u(0,0));else{var e=new g,r=this.graphManager.getRoot().updateLeftTop();if(null!=r){e.setWorldOrgX(t.x),e.setWorldOrgY(t.y),e.setDeviceOrgX(r.x),e.setDeviceOrgY(r.y);for(var n=this.getAllNodes(),i=0;i<n.length;i++)n[i].transform(e)}}},p.prototype.positionNodesRandomly=function(t){if(null==t)this.positionNodesRandomly(this.getGraphManager().getRoot()),this.getGraphManager().getRoot().updateBounds(!0);else for(var e,r,n=t.getNodes(),i=0;i<n.length;i++)null==(r=(e=n[i]).getChild())?e.scatter():0==r.getNodes().length?e.scatter():(this.positionNodesRandomly(r),e.updateBounds())},p.prototype.getFlatForest=function(){for(var t=[],e=!0,r=this.graphManager.getRoot().getNodes(),n=!0,o=0;o<r.length;o++)null!=r[o].getChild()&&(n=!1);if(!n)return t;var s=new l,a=[],h=new i,u=[];for(u=u.concat(r);u.length>0&&e;){for(a.push(u[0]);a.length>0&&e;){var g=a[0];a.splice(0,1),s.add(g);var c=g.getEdges();for(o=0;o<c.length;o++){var p=c[o].getOtherEnd(g);if(h.get(g)!=p){if(s.contains(p)){e=!1;break}a.push(p),h.put(p,g)}}}if(e){var d=[];s.addAllTo(d),t.push(d);for(o=0;o<d.length;o++){var f=d[o],y=u.indexOf(f);y>-1&&u.splice(y,1)}s=new l,h=new i}else t=[]}return t},p.prototype.createDummyNodesForBendpoints=function(t){for(var e=[],r=t.source,n=this.graphManager.calcLowestCommonAncestor(t.source,t.target),i=0;i<t.bendpoints.length;i++){var o=this.newNode(null);o.setRect(new Point(0,0),new Dimension(1,1)),n.add(o);var s=this.newEdge(null);this.graphManager.add(s,r,o),e.add(o),r=o}s=this.newEdge(null);return this.graphManager.add(s,r,t.target),this.edgeToDummyNodes.put(t,e),t.isInterGraph()?this.graphManager.remove(t):n.remove(t),e},p.prototype.createBendpointsFromDummyNodes=function(){var t=[];t=t.concat(this.graphManager.getAllEdges()),t=this.edgeToDummyNodes.keySet().concat(t);for(var e=0;e<t.length;e++){var r=t[e];if(r.bendpoints.length>0){for(var n=this.edgeToDummyNodes.get(r),i=0;i<n.length;i++){var o=n[i],s=new u(o.getCenterX(),o.getCenterY()),a=r.bendpoints.get(i);a.x=s.x,a.y=s.y,o.getOwner().remove(o)}this.graphManager.add(r,r.source,r.target)}}},p.transform=function(t,e,r,n){if(null!=r&&null!=n){var i=e;if(t<=50)i-=(e-e/r)/50*(50-t);else i+=(e*n-e)/50*(t-50);return i}var o,s;return t<=50?(o=9*e/500,s=e/10):(o=9*e/50,s=-8*e),o*t+s},p.findCenterOfTree=function(t){var e=[];e=e.concat(t);var r=[],n=new i,o=!1,s=null;1!=e.length&&2!=e.length||(o=!0,s=e[0]);for(var a=0;a<e.length;a++){var h=(c=e[a]).getNeighborsList().size();n.put(c,c.getNeighborsList().size()),1==h&&r.push(c)}var u=[];for(u=u.concat(r);!o;){var g=[];g=g.concat(u),u=[];for(a=0;a<e.length;a++){var c=e[a],l=e.indexOf(c);l>=0&&e.splice(l,1);var p=c.getNeighborsList();Object.keys(p.set).forEach(function(t){var e=p.set[t];if(r.indexOf(e)<0){var i=n.get(e)-1;1==i&&u.push(e),n.put(e,i)}})}r=r.concat(u),1!=e.length&&2!=e.length||(o=!0,s=e[0])}return s},p.prototype.setGraphManager=function(t){this.graphManager=t},t.exports=p},function(t,e){function r(){this.listeners=[]}var n=r.prototype;n.addListener=function(t,e){this.listeners.push({event:t,callback:e})},n.removeListener=function(t,e){for(var r=this.listeners.length;r>=0;r--){var n=this.listeners[r];n.event===t&&n.callback===e&&this.listeners.splice(r,1)}},n.emit=function(t,e){for(var r=0;r<this.listeners.length;r++){var n=this.listeners[r];t===n.event&&n.callback(e)}},t.exports=r}])},t.exports=n()},function(t,e,r){"use strict";var n=r(0).LNode,i=r(0).Quicksort;function o(t,e,r,i){void 0!==r&&void 0!==i?n.call(this,t,e,r,i):n.call(this,t,e),this.angle=0,this.circleIndex=-1,this.totalCrossingOfEdges=-1,this.isCrossingNumberValid=!1}for(var s in o.prototype=Object.create(n.prototype),n)o[s]=n[s];o.prototype.getCircle=function(){return this.getOwner()},o.prototype.setIndex=function(t){this.circleIndex=t,this.isCrossingNumberValid=!1},o.prototype.getIndex=function(){return this.circleIndex},o.prototype.getNeighborsSortedByDegree=function(){var t=[];this.getNeighborsList().addAllTo(t);var e=t.filter(function(t){return-1===t.getIndex()});return i.quicksort(e,function(t,e){return e.getDegree()>t.getDegree()}),e},o.prototype.getDegree=function(){return this.getEdges().length},o.prototype.isOrdered=function(){return this.getIndex()>-1},o.prototype.setAngle=function(t){this.angle=t},o.prototype.getAngle=function(){return this.angle},o.prototype.getCircDistWithTheNode=function(t){var e=t.getIndex();if(-1===e||-1===this.getIndex())return-1;var r=this.getIndex()-e;return r<0&&(r+=this.getCircle().getSize()),r},o.prototype.getCrossingNumberWithNode=function(t){var e=0;return this.getEdges().forEach(function(r){t.getEdges().forEach(function(t){e+=r.crossingWithEdge(t)})}),e},o.prototype.getTotalCrossingOfEdges=function(){return this.isCrossingNumberValid||(this.calculateTotalCrossing(),this.isCrossingNumberValid=!0),this.totalCrossingOfEdges},o.prototype.calculateTotalCrossing=function(){var t=this,e=0,r=t.getCircle().getEdges();r=r.filter(function(e){return!t.getEdges().includes(e)}),t.getEdges().forEach(function(t){return e+=t.calculateTotalCrossingWithList(r)}),t.totalCrossingOfEdges=e},t.exports=o},function(t,e,r){"use strict";var n=r(3),i=function(t){t&&t("layout","avsdf",n(t))};"undefined"!=typeof cytoscape&&i(cytoscape),t.exports=i},function(t,e,r){"use strict";var n=r(4),i=r(1),o=r(0).PointD,s=r(0).DimensionD,a={ready:function(){},stop:function(){},refresh:30,fit:!0,padding:10,randomize:!0,numIter:2500,animate:"end",animationDuration:500,tilingPaddingVertical:10,tilingPaddingHorizontal:10};function h(t){this.options=function(t,e){var r={};for(var n in t)r[n]=t[n];for(var i in e)r[i]=e[i];return r}(a,t)}h.prototype.run=function(){var t=void 0,e=void 0,r=this.options;this.idToLNode={};var i=this.layout=new n,o=this;o.stopped=!1,this.cy=this.options.cy,this.cy.trigger({type:"layoutstart",layout:this});var s=i.newGraphManager();this.gm=s;var a=this.options.eles.nodes(),h=this.options.eles.edges();this.root=s.addRoot(),this.processChildrenList(this.root,a,i);for(var u=0;u<h.length;u++){var g=h[u],c=this.idToLNode[g.data("source")],l=this.idToLNode[g.data("target")];if(c!==l&&0===c.getEdgesBetween(l).length)s.add(i.newEdge(),c,l).id=g.id()}var p=function(t,e){"number"==typeof t&&(t=e);var r=t.data("id"),n=o.idToLNode[r];return{x:n.getRect().getCenterX(),y:n.getRect().getCenterY()}},d=function n(){var s=function(){r.fit&&r.cy.fit(r.eles.nodes(),r.padding),t||(t=!0,o.cy.one("layoutready",r.ready),o.cy.trigger({type:"layoutready",layout:o}))};if(o.stopped)return i.checkLayoutSuccess()&&!i.isSubLayout&&i.doPostLayout(),i.isLayoutFinished=!0,o.options.eles.nodes().positions(p),s(),o.cy.one("layoutstop",o.options.stop),o.cy.trigger({type:"layoutstop",layout:o}),e&&cancelAnimationFrame(e),void(t=!1);var a=o.layout.getPositionsData();r.eles.nodes().positions(function(t,e){"number"==typeof t&&(t=e);var r=t.id(),n=a[r];return null!=n?{x:n.x,y:n.y}:{x:t.position("x"),y:t.position("y")}}),s(),e=requestAnimationFrame(n)};return i.addListener("layoutstarted",function(){"during"===o.options.animate&&(e=requestAnimationFrame(d))}),i.layout(),"during"!==this.options.animate&&(o.options.eles.nodes().not(":parent").layoutPositions(o,o.options,p),t=!1),this},h.prototype.processChildrenList=function(t,e,r){for(var n=e.length,a=0;a<n;a++){var h=e[a],u=void 0,g=h.layoutDimensions({nodeDimensionsIncludeLabels:this.options.nodeDimensionsIncludeLabels});(u=null!=h.outerWidth()&&null!=h.outerHeight()?t.add(new i(r.graphManager,null,new o(h.position("x")-g.w/2,h.position("y")-g.h/2),new s(parseFloat(g.w),parseFloat(g.h)))):t.add(new i(this.graphManager))).id=h.data("id"),u.paddingLeft=parseInt(h.css("padding")),u.paddingTop=parseInt(h.css("padding")),u.paddingRight=parseInt(h.css("padding")),u.paddingBottom=parseInt(h.css("padding")),this.idToLNode[h.data("id")]=u,isNaN(u.rect.x)&&(u.rect.x=0),isNaN(u.rect.y)&&(u.rect.y=0)}},t.exports=function(t){return h}},function(t,e,r){"use strict";var n=r(0).Layout,i=r(0).Quicksort,o=r(5),s=r(6),a=r(1),h=r(7);function u(){n.call(this),this.nodeSeparation=o.DEFAULT_NODE_SEPARATION}for(var g in u.prototype=Object.create(n.prototype),n)u[g]=n[g];u.prototype.newGraph=function(t){return new s(null,this.graphManager,t)},u.prototype.newNode=function(t){return new a(this.graphManager,t)},u.prototype.newEdge=function(t){return new h(null,null,t)},u.prototype.initParameters=function(){n.prototype.initParameters.call(this,arguments),this.isSubLayout||(this.defaultNodeSeparation=o.DEFAULT_NODE_SEPARATION,this.nodeSeparation=this.defaultNodeSeparation)},u.prototype.getNodeSeparation=function(){return this.nodeSeparation},u.prototype.getPositionsData=function(){for(var t=this.graphManager.getAllNodes(),e={},r=0;r<t.length;r++){var n=t[r].rect,i=t[r].id;e[i]={id:i,x:n.getCenterX(),y:n.getCenterY(),w:n.width,h:n.height}}return e},u.prototype.setNodeSeparation=function(t){this.nodeSeparation=t},u.prototype.layout=function(){if(this.graphManager.getGraphs().length>1)return!1;var t=this.graphManager.getRoot();for(t.setNodeSeparation(this.nodeSeparation),t.calculateRadius(),t.initOrdering();!t.hasFinishedOrdering();){var e=t.findNodeToPlace();t.putInOrder(e)}return this.postProcess(t),t.correctAngles(),t.getNodes().forEach(function(e){return e.setCenter(t.getCenterX()+t.getRadius()*Math.cos(e.getAngle()),t.getCenterY()+t.getRadius()*Math.sin(e.getAngle()))}),!0},u.prototype.postProcess=function(t){t.calculateEdgeCrossingsOfNodes();var e=t.getNodes();i.quicksort(e,function(t,e){return e.getTotalCrossingOfEdges()>t.getTotalCrossingOfEdges()});for(var r=0;r<e.length;r++)for(var n=e[r],o=n.getTotalCrossingOfEdges(),s=void 0,a=n.getNeighborsList(),h=0;h<a.length;h++){var u=(a[h].getIndex()+1)%t.getSize(),g=n.getIndex();if(g!==u){n.setIndex(u),g<n.getIndex()&&(g+=t.getSize());for(var c=n.getIndex();c<g;){var l=t.getOrder()[c%t.getSize()];l.setIndex((l.getIndex()+1)%t.getSize())}n.calculateTotalCrossing(),(s=n.getTotalCrossingOfEdges())>=o?t.loadOldIndicesOfNodes():(t.reOrderVertices(),o=s)}}},t.exports=u},function(t,e,r){"use strict";var n=r(0).LayoutConstants;function i(){}for(var o in n)i[o]=n[o];i.DEFAULT_NODE_SEPARATION=60,t.exports=i},function(t,e,r){"use strict";var n=r(0).LGraph;function i(t,e,r){n.call(this,t,e,r),this.inOrder=void 0,this.currentIndex=0,this.nodeSeparation=void 0,this.stack=[],this.perimeter=0,this.centerX=0,this.centerY=0,this.radius=0}for(var o in i.prototype=Object.create(n.prototype),n)i[o]=n[o];i.prototype.initOrdering=function(){this.inOrder=[]},i.prototype.getOrder=function(){return this.inOrder},i.prototype.getCenterX=function(){return this.centerX},i.prototype.getCenterY=function(){return this.centerY},i.prototype.getRadius=function(){return this.radius},i.prototype.getSize=function(){return this.getNodes().length},i.prototype.getTotalCrossingOfCircle=function(){var t=0;for(var e in this.inOrder){var r=e.getTotalCrossingOfEdges();if(-1===r)return-1;t+=r}return t/4},i.prototype.hasFinishedOrdering=function(){return this.currentIndex===this.getNodes().length},i.prototype.getNodeSeparation=function(){return this.nodeSeparation},i.prototype.setNodeSeparation=function(t){this.nodeSeparation=t},i.prototype.correctAngles=function(){var t=this;t.currentIndex=0,t.inOrder.forEach(function(e){return t.putInOrder(e)})},i.prototype.putInOrder=function(t){for(var e=this.getNodes(),r=!1,n=0;n<e.length;n++)if(e[n].id==t.id){r=!0;break}if(!r)throw"The node must be a member of LGraph";this.inOrder[this.currentIndex]=t,t.setIndex(this.currentIndex),0===this.currentIndex?t.setAngle(0):t.setAngle(this.inOrder[this.currentIndex-1].getAngle()+2*Math.PI*(t.getDiagonal()/2+this.nodeSeparation+this.inOrder[this.currentIndex-1].getDiagonal()/2)/this.perimeter),this.currentIndex++},i.prototype.findNodeToPlace=function(){var t=void 0;if(0===this.stack.length)t=this.findUnorderedSmallestDegreeNode();else{for(var e=!1;!e&&0!==this.stack.length;)e=!(t=this.stack.pop()).isOrdered();e||(t=void 0)}if(void 0===t&&(t=this.findUnorderedSmallestDegreeNode()),void 0!==t)for(var r=t.getNeighborsSortedByDegree(),n=0;n<r.length;n++){var i=r[n];i.isOrdered()||this.stack.push(i)}return t},i.prototype.calculateRadius=function(){var t=0;this.getNodes().forEach(function(e){return t+=Math.sqrt(e.getWidth()*e.getWidth()+e.getHeight()*e.getHeight())}),this.perimeter=t+this.getNodes().length*this.nodeSeparation;var e=this.perimeter/(2*Math.PI);this.getParent().setWidth(2*e),this.getParent().setHeight(2*e),this.getParent().setCenter(this.getParent().getWidth(),this.getParent().getHeight()),this.centerX=this.getParent().getCenterX(),this.centerY=this.getParent().getCenterY(),this.radius=this.getParent().getHeight()/2},i.prototype.calculateEdgeCrossingsOfNodes=function(){this.getNodes().forEach(function(t){return t.calculateTotalCrossing()})},i.prototype.loadOldIndicesOfNodes=function(){this.inOrder.forEach(function(t,e){return t.setIndex(e)})},i.prototype.reOrderVertices=function(){this.getNodes().forEach(function(t){return self.inOrder[t.getIndex()]=t})},i.prototype.findUnorderedSmallestDegreeNode=function(){var t=Number.MAX_SAFE_INTEGER,e=void 0;return this.getNodes().forEach(function(r){r.getDegree()<t&&!r.isOrdered()&&(t=r.getDegree(),e=r)}),e},t.exports=i},function(t,e,r){"use strict";var n=r(0).LEdge;function i(t,e,r){n.call(this,t,e,r)}for(var o in i.prototype=Object.create(n.prototype),n)i[o]=n[o];i.prototype.getOtherEnd=function(t){return n.prototype.getOtherEnd(t)},i.prototype.crossesWithEdge=function(t){var e=this.getSource().getIndex(),r=this.getTarget().getIndex(),n=t.getSource().getIndex(),i=t.getTarget().getIndex();if(-1===e||-1===r||-1===n||-1===i)return!1;var o=t.getSource().getCircDistWithTheNode(this.getSource()),s=t.getTarget().getCircDistWithTheNode(this.getSource()),a=this.getTarget().getCircDistWithTheNode(this.getSource());return a<Math.max(o,s)&&a>Math.min(o,s)&&0!==s&&0!==o},i.prototype.crossingWithEdge=function(t){return this.crossesWithEdge(t)?1:0},i.prototype.calculateTotalCrossingWithList=function(t){var e=this,r=0;return t.forEach(function(t){return r+=e.crossingWithEdge(t)}),r},t.exports=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,